[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_if = 'vimrc#meet_deoplete_requirements()'
depends = 'context_filetype.vim'
on_event = 'InsertEnter'
hook_source = 'call deoplete#enable()'

[[plugins]]
repo = 'Shougo/neocomplete'
depends = 'context_filetype.vim'
on_if = '!vimrc#meet_deoplete_requirements() && vimrc#meet_neocomplete_requirements()'
on_event = 'InsertEnter'
hook_source = '''
  " Disable AutoComplPop.
  let g:acp_enableAtStartup = 0
  " Use neocomplete.
  let g:neocomplete#enable_at_startup = 1
  " Use smartcase.
  let g:neocomplete#enable_smart_case = 1
  " Set minimum syntax keyword length.
  let g:neocomplete#sources#syntax#min_keyword_length = 3
'''

[[plugins]]
repo = 'othree/yajs.vim'
on_ft = 'javascript'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  nnoremap <F8> :NERDTreeFind<CR>
  "nnoremap <C-w>j :<C-w>j<ESC>:NERDTreeFind<CR>
  nnoremap <silent> <F9> :NERDTreeToggle<CR>

  let file_name = expand("%")
  if has('vim_starting') &&  file_name == ""
    if file_name == ""
      autocmd VimEnter * NERDTree ./
    endif
  endif
'''

[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = 'markdown'
hook_add = 'let g:vim_markdown_conceal = 0'

[[plugins]]
repo = 'aklt/plantuml-syntax'

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
on_if = '!has("nvim")'

[[plugins]]
repo = 'roxma/nvim-yarp'
on_if = '!has("nvim")'

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_event = 'InsertCharPre'
on_ft = 'snippet'
hook_source = '''
  " Plugin key-mappings.
  " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
  imap <C-k>     <Plug>(neosnippet_expand_or_jump)
  smap <C-k>     <Plug>(neosnippet_expand_or_jump)
  xmap <C-k>     <Plug>(neosnippet_expand_target)

  " SuperTab like snippets behavior.
  " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
  "imap <expr><TAB>
  " \ pumvisible() ? "\<C-n>" :
  " \ neosnippet#expandable_or_jumpable() ?
  " \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
  smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
  \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

  let g:neosnippet#snippets_directory = '~/.vim/snippets'


  " For conceal markers.
  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'
hook_add = '''
  " By default syntax-highlighting for Functions, Methods and Structs is disabled.
  let g:go_highlight_functions = 1
  let g:go_highlight_methods = 1
  let g:go_highlight_structs = 1
  let g:go_highlight_interfaces = 1
  let g:go_highlight_operators = 1
  let g:go_highlight_build_constraints = 1

  " Enable goimports to automatically insert import paths instead of gofmt:
  let g:go_fmt_command = "goimports"

  " By default vim-go shows errors for the fmt command, to disable it:
  " let g:go_fmt_fail_silently = 1

  " Disable auto fmt on save:
  let g:go_fmt_autosave = 0

  " Disable opening browser after posting your snippet to play.golang.org:
  " let g:go_play_open_browser = 0

  autocmd filetype go autocmd QuitPre <buffer> GoFmt
  autocmd filetype go.test autocmd QuitPre <buffer> GoFmt
  " autocmd filetype go autocmd BufWritePre <buffer> GoLint

  let g:go_metalinter_enabled = 1

  nnoremap <C-g> :GoErrCheck<CR>
'''

[[plugins]]
repo = 'majutsushi/tagbar'
hook_add = 'nnoremap <Leader>tb :TagbarToggle<CR>'
hook_source = '''
  " gotags setting
  let g:tagbar_type_go = {
      \ 'ctagstype' : 'go',
      \ 'kinds'     : [
          \ 'p:package',
          \ 'i:imports:1',
          \ 'c:constants',
          \ 'v:variables',
          \ 't:types',
          \ 'n:interfaces',
          \ 'w:fields',
          \ 'e:embedded',
          \ 'm:methods',
          \ 'r:constructor',
          \ 'f:functions'
      \ ],
      \ 'sro' : '.',
      \ 'kind2scope' : {
          \ 't' : 'ctype',
          \ 'n' : 'ntype'
      \ },
      \ 'scope2kind' : {
          \ 'ctype' : 't',
          \ 'ntype' : 'n'
      \ },
      \ 'ctagsbin'  : 'gotags',
      \ 'ctagsargs' : '-sort -silent'
  \ }
'''

[[plugins]]
repo = 'elzr/vim-json'
on_ft = 'json'
hook_add = 'let g:vim_json_syntax_conceal = 0'

[[plugins]]
repo = 'posva/vim-vue'
on_ft = 'vue'

[[plugins]]
repo  = 'leafgarland/typescript-vim'
on_ft = 'typescript'

[[plugins]]
repo  = 'Quramy/tsuquyomi'
on_ft = 'typescript'
